#!/usr/bin/env bash

LATEST_JDK_VERSION="1.8"

if [ ${STACK:-""} = "cedar" ]; then
  DEFAULT_JDK_VERSION="1.6"
  JDK_URL_1_8=${JDK_URL_1_8:-"http://lang-jvm.s3.amazonaws.com/jdk/openjdk1.8.0_20.tar.gz"}
  JDK_URL_1_7=${JDK_URL_1_7:-"http://lang-jvm.s3.amazonaws.com/jdk/openjdk1.7.0_55.tar.gz"}
  JDK_URL_1_6=${JDK_URL_1_6:-"http://lang-jvm.s3.amazonaws.com/jdk/openjdk1.6.0_27.tar.gz"}
else
  DEFAULT_JDK_VERSION="1.8"
  JDK_URL_1_9=${JDK_URL_1_9:-"http://lang-jvm.s3.amazonaws.com/jdk/cedar-14/openjdk1.9-latest.tar.gz"}
  JDK_URL_1_8=${JDK_URL_1_8:-"http://lang-jvm.s3.amazonaws.com/jdk/openjdk1.8.0_60-cedar14.tar.gz"}
  JDK_URL_1_7=${JDK_URL_1_7:-"http://lang-jvm.s3.amazonaws.com/jdk/openjdk1.7.0_79-cedar14.tar.gz"}
  JDK_URL_1_6=${JDK_URL_1_6:-"http://lang-jvm.s3.amazonaws.com/jdk/openjdk1.6.0_27.tar.gz"}
fi

install_java() {
  baseDir=$1
  if [ ! -d "${baseDir}" ]; then
    error_return "Invalid directory to install java."
    return 1
  fi

  javaVersion=${2:-$(get_default_java_version)}
  if [ "$(is_supported_java_version ${javaVersion})" != "true" ]; then
    error_return "Unsupported Java version: $javaVersion"
    return 1
  fi

  jdkDir="${baseDir}"/.jdk
  jdkTarball="${jdkDir}"/jdk.tar.gz
  javaExe="${jdkDir}/bin/java"
  mkdir -p "${jdkDir}"
  if [ ! -f "${jdkTarball}" ] && [ ! -f "${javaExe}" ] || is_java_version_change "${jdkDir}" "${javaVersion}"; then
    rm -rf "${jdkDir}"
    mkdir -p "${jdkDir}"
    jdkUrl=$(_get_jdk_download_url "${javaVersion}")
    curl --silent --location ${jdkUrl} --output ${jdkTarball}
    tar pxzf ${jdkTarball} -C "${jdkDir}"
    rm ${jdkTarball}
    echo "${javaVersion}" > "${jdkDir}/version"
    if [ ! -f "${javaExe}" ]; then
      error_return "Unable to retrieve the JDK."
      return 1
    fi
  fi
  export JAVA_HOME=${jdkDir}
  export PATH="${jdkDir}/bin:${PATH}"

  _install_tools ${baseDir}
  _create_export_script ${JAVA_HOME} "$(pwd)"
}

jdk_overlay() {
  baseDir=$1
  shopt -s dotglob
  if [ -d ${baseDir}/.jdk ] && [ -d ${baseDir}/.jdk-overlay ]; then
    cp -r ${baseDir}/.jdk-overlay/* ${baseDir}/.jdk/
  fi
}

is_java_version_change() {
  jdkDir=$1
  javaVersion=${2:-${DEFAULT_JDK_VERSION}}
  if [ ! -d "${jdkDir}" ]; then echo "Invalid JDK directory."; return 1; fi
  test -f "${jdkDir}/version" && [ "$(cat ${jdkDir}/version)" != "${javaVersion}" ]
}

_get_jdk_download_url() {
  jdkVersion=${1:-${DEFAULT_JDK_VERSION}}
  # hacky way of parsing the variable name.
  # bash 4 would solve this with associative arrays, but shunit
  # tests don't seem to respect the correct bash version.
  minorJdkVersion=\$JDK_URL_1_$(expr "${jdkVersion}" : '1.\([6-9]\)')
  jdkUrl=$(eval echo \$JDK_URL_1_${minorJdkVersion})
  echo "${jdkUrl}"
}

is_supported_java_version() {
  javaVersion=$1
  if [ "$(expr "${javaVersion}" : '1.[6-9]')" != 0 ]; then
    echo "true"
  else
    echo "false"
  fi
}

get_default_java_version() {
  if [ ${STACK:-""} = "cedar" ]; then
    echo "1.6"
  else
    echo "$DEFAULT_JDK_VERSION"
  fi
}

detect_java_version() {
  baseDir=${1:-"No Dir"}
  if [ "${baseDir}" = "No Dir" ] || [ ! -d "${baseDir}" ] ; then
    error_return "Invalid directory specified for pom file."
    return 1
  fi
  if [ -f ${baseDir}/system.properties ]; then
    echo "$(get_app_system_value ${baseDir}/system.properties "java.runtime.version")"
  else
    echo "$(get_default_java_version)"
  fi
}

get_app_system_value() {
  local file=${1?"No file specified"}
  local key=${2?"No key specified"}

  # escape for regex
  local escaped_key=$(echo $key | sed "s/\./\\\./g")

  [ -f $file ] && \
  grep -E ^$escaped_key[[:space:]=]+ $file | \
  sed -E -e "s/$escaped_key([\ \t]*=[\ \t]*|[\ \t]+)([A-Za-z0-9\.-]*).*/\2/g"
}

_install_tools() {
  local ctxDir=${1:-BUILD_DIR}
  local curDir=${JVM_COMMON_DIR:-$(cd $(dirname ${BASH_SOURCE[0]}) && cd .. && pwd )}

  mkdir -p $ctxDir/.heroku/bin
  mkdir -p $ctxDir/.heroku/with_jmap/bin
  cp $curDir/opt/with_jmap $ctxDir/.heroku/bin/with_jmap
  cp $curDir/opt/with_jmap_java $ctxDir/.heroku/with_jmap/bin/java
  chmod +x $ctxDir/.heroku/bin/with_jmap
  chmod +x $ctxDir/.heroku/with_jmap/bin/java

  mkdir -p $ctxDir/.heroku/with_jstack/bin
  cp $curDir/opt/with_jstack $ctxDir/.heroku/bin/with_jstack
  cp $curDir/opt/with_jstack_java $ctxDir/.heroku/with_jstack/bin/java
  chmod +x $ctxDir/.heroku/bin/with_jstack
  chmod +x $ctxDir/.heroku/with_jstack/bin/java
}

_create_export_script() {
  local javaHome=${1:-JAVA_HOME}
  local ctxDir=${2:-CWD}

  if [ -w ${ctxDir} ]; then
    cat << EOF > ${ctxDir}/export
export JAVA_HOME=$javaHome
export PATH=\$JAVA_HOME/bin:\$PATH
EOF
  fi
}